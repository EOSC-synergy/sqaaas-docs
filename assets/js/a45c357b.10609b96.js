"use strict";(self.webpackChunkdoc=self.webpackChunkdoc||[]).push([[429],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),c=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=c(e.components);return a.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),h=c(n),d=o,f=h["".concat(l,".").concat(d)]||h[d]||p[d]||r;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=h;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=n[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},274:function(e,t,n){n.r(t),n.d(t,{contentTitle:function(){return l},default:function(){return h},frontMatter:function(){return s},metadata:function(){return c},toc:function(){return u}});var a=n(7462),o=n(3366),r=(n(7294),n(3905)),i=["components"],s={title:"Customizing the assessment"},l=void 0,c={unversionedId:"quality_assessment_and_awarding/customize",id:"quality_assessment_and_awarding/customize",isDocsHomePage:!1,title:"Customizing the assessment",description:"The SQAaaS platform executes multiple checks for assessing each criterion and",source:"@site/docs/quality_assessment_and_awarding/customize.md",sourceDirName:"quality_assessment_and_awarding",slug:"/quality_assessment_and_awarding/customize",permalink:"/quality_assessment_and_awarding/customize",version:"current",frontMatter:{title:"Customizing the assessment"},sidebar:"tutorialSidebar",previous:{title:"Sharing the badges",permalink:"/quality_assessment_and_awarding/share"},next:{title:"Loading a previously-generated QAA report",permalink:"/quality_assessment_and_awarding/load_report"}},u=[{value:"Customizing the behavior of tools: linting and styling",id:"customizing-the-behavior-of-tools-linting-and-styling",children:[{value:"flake8 (Python)",id:"flake8-python",children:[]},{value:"checkstyle (Java)",id:"checkstyle-java",children:[]}]}],p={toc:u};function h(e){var t=e.components,n=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"The SQAaaS platform executes multiple checks for assessing each criterion and\nassociated subcriteria. According to the given criterion, the check might\nconsist on ensuring the presence of a set of files (e.g. licenses or code of\nconduct for the documentation criterion), analysing their content (for licenses\nor metadata for code) or running static/dynamic analysis tools according to the\nprogramming language in use. Check out the\n",(0,r.kt)("a",{parentName:"p",href:"/tooling"},"current list of tools")," supported in the SQAaaS platform."),(0,r.kt)("h2",{id:"customizing-the-behavior-of-tools-linting-and-styling"},"Customizing the behavior of tools: linting and styling"),(0,r.kt)("p",null,"Full compliance with style rules, and in some particular circumstances, with\nthose related to linting aspects should not be enforced when assessing the\nquality of the code. Legacy or code that\nhas been developed over a extended period of time cannot be easily adapted to\nnew quality standards or trends. As a result, the SQAaaS allows passing\nexceptions to the default rules through the use of configuration files (as long\nas the tool supports them)."),(0,r.kt)("p",null,"Throughout this section we summarize how to alter the default behavior of the\nstandards used by the tools supported in the SQAaaS platform. It is important\nto stress that the configuration file/s must exist in the version of the code\nrepository that we are assessing through the SQAaaS, and placed in the location\nexpected by the tool."),(0,r.kt)("h3",{id:"flake8-python"},"flake8 (Python)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://flake8.pycqa.org/"},(0,r.kt)("inlineCode",{parentName:"a"},"flake8"))," allows\n",(0,r.kt)("a",{parentName:"p",href:"https://flake8.pycqa.org/en/latest/user/configuration.html#configuration-locations"},"3 different locations"),"\nfor the configuration files. Either way, you need to have a ",(0,r.kt)("inlineCode",{parentName:"p"},"[flake8]")," section\nwhere you will add your exceptions. An example that excludes a set of rules and\ndefines a maximum line length of 120, would be:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[flake8]\nextend-ignore = E402, F841, F821, E722\nmax-line-length = 120\n")),(0,r.kt)("h3",{id:"checkstyle-java"},"checkstyle (Java)"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"https://checkstyle.sourceforge.io/"},(0,r.kt)("inlineCode",{parentName:"a"},"checkstyle"))," is currently supported as a\nMaven's plugin. Following the documentation, the\n",(0,r.kt)("a",{parentName:"p",href:"https://checkstyle.sourceforge.io/sun_style.html"},"Sun code style")," is the one\nused by default. Based on the\n",(0,r.kt)("a",{parentName:"p",href:"https://maven.apache.org/plugins/maven-checkstyle-plugin/check-mojo.html#checkstyle-check"},"Maven's goal ",(0,r.kt)("inlineCode",{parentName:"a"},"checkstyle:check")),",\nyou can define your own rules by passing the\n",(0,r.kt)("a",{parentName:"p",href:"https://maven.apache.org/plugins/maven-checkstyle-plugin/checkstyle-mojo.html#configLocation"},(0,r.kt)("inlineCode",{parentName:"a"},"configLocation")," parameter"),",\nsuch as in:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<plugin>\n    <groupId>org.apache.maven.plugins</groupId>\n    <artifactId>maven-checkstyle-plugin</artifactId>\n    <version>3.2.2</version>\n    <configuration>\n        <configLocation>checkstyle.xml</configLocation>\n    </configuration>\n</plugin>\n")),(0,r.kt)("p",null,"Note that your checkstyle's plugin version might be different from the one\nused in this example. The ",(0,r.kt)("inlineCode",{parentName:"p"},"configLocation")," points to a file named\n",(0,r.kt)("inlineCode",{parentName:"p"},"checkstyle.xml")," and this is where all modifications shall be added. For\ninstance, if we would like to increase Sun's default line length to 120 chars\n(by default is 80), we would modify Sun's rules (assuming they have been already\nadded in ",(0,r.kt)("inlineCode",{parentName:"p"},"checkstyle.xml"),") as follows:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'<module name="LineLength">\n    <property name="max" value="120"/>\n</module>\n')))}h.isMDXComponent=!0}}]);